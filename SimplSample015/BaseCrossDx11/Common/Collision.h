/*!
@file Collision.h
@brief 衝突判定コンポーネント
*/
#pragma once
#include "stdafx.h"

namespace basecross {

	class CollisionSphere;
	class CollisionObb;

	//--------------------------------------------------------------------------------------
	///	 衝突した時の動作定義
	//--------------------------------------------------------------------------------------
	enum class IsHitAction {
		Stop,		///<速度をストップする
		AutoOnObjectRepel,	///<物体に乗ったときに自動的に反発をストップする
	};





	//--------------------------------------------------------------------------------------
	///	 衝突判定コンポーネントの親クラス
	//--------------------------------------------------------------------------------------
	class Collision : public Component {
	protected:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトコンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit Collision(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	プロテクトデストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~Collision();
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	固定衝突オブジェクトかどうかを得る。
		@return	固定衝突オブジェクトならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool GetFixed() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	固定衝突オブジェクトかどうかを得る。
		@return	固定衝突オブジェクトならtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsFixed() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	固定衝突オブジェクトかどうかを設定する
		@param[in]	b	固定衝突オブジェクトならtrue
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetFixed(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 更新処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnUpdate()override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief ヒットオブジェクトの追加
		@param[in]	DestColl	相手のゲームオブジェクト
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void AddHitObject(const shared_ptr<GameObject>& DestObject);

		//--------------------------------------------------------------------------------------
		/*!
		@brief ヒットオブジェクトのクリア
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void ClearHitObject();

		//--------------------------------------------------------------------------------------
		/*!
		@brief ヒットオブジェクト配列の取得
		@return	ヒットオブジェクト配列
		*/
		//--------------------------------------------------------------------------------------
		vector<shared_ptr<GameObject>>& GetHitObjectVec();

		//--------------------------------------------------------------------------------------
		/*!
		@brief	衝突した時のアクションを得る。
		@return	衝突した時のアクション
		*/
		//--------------------------------------------------------------------------------------
		IsHitAction GetIsHitAction() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	衝突した時のアクションを設定する
		@param[in]	HitAction	アクション
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetIsHitAction(IsHitAction HitAction);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってるオブジェクトがあるかどうか
		@return	乗ってるオブジェクトがあればtrue
		*/
		//--------------------------------------------------------------------------------------
		bool IsOnObject();
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってるオブジェクトがあるかをセット
		@param[in]	b	ある場合はtrue
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetOnObject(bool b);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット呼び出し側
		@param[in]	DestColl	相手のCollisio
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetDestRotGravityBase(const shared_ptr<Collision>& DestColl);
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionSphere
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionSphere>& DestColl) = 0;

		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionObb
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionObb>& DestColl) = 0;

		//--------------------------------------------------------------------------------------
		/*!
		@brief Collisionの上に乗っているかテストして追加する
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		bool AddOnObjectTest(const shared_ptr<Collision>& DestColl);

		//--------------------------------------------------------------------------------------
		/*!
		@brief 上に乗っている配列に該当するかチェックする
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		bool ChkOnObjectTest(const shared_ptr<Collision>& DestColl);

		//--------------------------------------------------------------------------------------
		/*!
		@brief Collisionの上に乗っているかテストの呼び出し側
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		bool OnObjectTestBase(const shared_ptr<Collision>& DestColl);

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionSphere>& DestColl) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionObb>& DestColl) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 衝突テスト親
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void CollisionTestBase(const shared_ptr<Collision>& DestColl);
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionSphere>& DestColl) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionObb>& DestColl) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief １つ前のターンからの指定時間の位置に戻る
		@param[in]	SpanTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void BackToBefore(float SpanTime) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionSphere>& DestColl, float SpanTime) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionObb>& DestColl, float SpanTime) = 0;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionSphere>& DestColl) = 0;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionObb>& DestColl) = 0;

		//--------------------------------------------------------------------------------------
		/*!
		@brief 描画処理。デフォルトは何も行わない
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnDraw()override {}
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};

	//--------------------------------------------------------------------------------------
	//	class CollisionSphere : public Collision ;
	//	用途: 球衝突判定コンポーネント
	//--------------------------------------------------------------------------------------
	class CollisionSphere : public Collision {
	protected:
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit CollisionSphere(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	デストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~CollisionSphere();
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の直径を得る
		@return	作成時の直径
		*/
		//--------------------------------------------------------------------------------------
		float GetMakedDiameter() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の直径を設定する
		@param[in]	f	作成時の直径
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMakedDiameter(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の半径を得る。内部では直径のみ持っているので、直径の0.5を返す
		@return	作成時の半径
		*/
		//--------------------------------------------------------------------------------------
		float GetMakedRadius() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の直径を半径をもとに設定する。内部では直径のみ持っているので、2倍したものを直径に設定する
		@param[in]	f	作成時の半径
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMakedRadius(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のSPHER境界ボリュームを得る
		@return	現在のSPHER境界ボリューム
		*/
		//--------------------------------------------------------------------------------------
		SPHERE GetSphere() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1ターン前のSPHER境界ボリュームを得る
		@return	1ターン前のSPHER境界ボリューム
		*/
		//--------------------------------------------------------------------------------------
		SPHERE GetBeforeSphere() const;

		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionSphere
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionObb
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionObb>& DestColl)override;


		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionSphere>& DestColl)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionObb>& DestColl)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionSphere>& DestColl)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionObb>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief １つ前のターンからの指定時間の位置に戻る
		@param[in]	SpanTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void BackToBefore(float SpanTime)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionSphere>& DestColl, float SpanTime)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionObb>& DestColl, float SpanTime)override;


		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionObb>& DestColl)override;

	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};



	//--------------------------------------------------------------------------------------
	//	class CollisionObb : public Collision ;
	//	用途: Obb衝突判定コンポーネント
	//--------------------------------------------------------------------------------------
	class CollisionObb : public Collision {
	protected:
	public:
		//--------------------------------------------------------------------------------------
		/*!
		@brief	コンストラクタ
		@param[in]	GameObjectPtr	ゲームオブジェクト
		*/
		//--------------------------------------------------------------------------------------
		explicit CollisionObb(const shared_ptr<GameObject>& GameObjectPtr);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	ストラクタ
		*/
		//--------------------------------------------------------------------------------------
		virtual ~CollisionObb();
		//--------------------------------------------------------------------------------------
		/*!
		@brief 初期化処理
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void OnCreate() override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の1辺の長さを得る
		@return	作成時の1辺の長さ
		*/
		//--------------------------------------------------------------------------------------
		float GetMakedSize() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	作成時の1辺の長さを設定する
		@param[in]	f	作成時の1辺の長さ
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		void SetMakedSize(float f);
		//--------------------------------------------------------------------------------------
		/*!
		@brief	現在のOBB境界ボリュームを得る
		@return	現在のOBB境界ボリューム
		*/
		//--------------------------------------------------------------------------------------
		OBB GetObb() const;
		//--------------------------------------------------------------------------------------
		/*!
		@brief	1ターン前のOBB境界ボリュームを得る
		@return	1ターン前のOBB境界ボリューム
		*/
		//--------------------------------------------------------------------------------------
		OBB GetBeforeObb() const;

		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionSphere
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief 乗ってる相手の角度に合わせて重力をセット
		@param[in]	DestColl	相手のCollisionObb
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void SetDestRotGravity(const shared_ptr<CollisionObb>& DestColl)override;


		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbの上に乗っているかテスト
		@param[in]	DestColl	相手のコリジョン
		@return	乗っていなければfalse
		*/
		//--------------------------------------------------------------------------------------
		virtual bool OnObjectTest(const shared_ptr<CollisionObb>& DestColl)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突テスト
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionTest(const shared_ptr<CollisionObb>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief １つ前のターンからの指定時間の位置に戻る
		@param[in]	SpanTime	時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void BackToBefore(float SpanTime)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionSphere>& DestColl, float SpanTime)override;

		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbとの衝突後処理
		@param[in]	DestColl	相手のコリジョン
		@param[in]	SpanTime	衝突時間
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void AfterCollision(const shared_ptr<CollisionObb>& DestColl, float SpanTime)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionSphereからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionSphere>& DestColl)override;
		//--------------------------------------------------------------------------------------
		/*!
		@brief CollisionObbからのエスケープ
		@param[in]	DestColl	相手のコリジョン
		@return	なし
		*/
		//--------------------------------------------------------------------------------------
		virtual void CollisionEscape(const shared_ptr<CollisionObb>& DestColl)override;
	private:
		// pImplイディオム
		struct Impl;
		unique_ptr<Impl> pImpl;
	};


}
//end basecross
